#+TITLE: Emacs Config
#+Author: Filip Lindahl

* Personal Info
** Contact Information
   #+begin_src emacs-lisp
   (setq user-full-name "Filip Lindahl"
    user-email-address "gysztaf@gmail.com")
   #+end_src
** Location
   #+begin_src emacs-lisp
   (setq calendar-location-name "Gothenburg, SE")
   (setq calendar-latitude 57.70887000)
   (setq calendar-longitude 11.97456000)
   #+end_src
* Customize settings
  A custom file to keep customizations out of
  [[file:init.el][init.el]]. All to declutter my [[file:init.el][init.el]].
  #+begin_src emacs_lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
  #+end_src
* Initialization
  Removes unnecessary noise.
  #+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode 1)
  (show-paren-mode)
  #+end_src
* Themes
** Spacemacs-dark
   A nice dark theme that works great during the night.
   #+begin_src emacs-lisp
   (use-package spacemacs-common
    :ensure spacemacs-theme
    :defer t)
   #+end_src
** Solarized-dark
   Another dark theme that is slightly less dark than the previous
   theme and therefore works better during the day.
   #+begin_src emacs-lisp
   (use-package solarized-theme
    :ensure t)
   #+end_src
** Theme-changer
   A package that switches themes depending on whether the sun is out
   in your location(that was set-up earlier in my config file.
   #+begin_src emacs-lisp
   (use-package theme-changer
    :ensure t
    :config
    (change-theme 'solarized-dark 'spacemacs-dark))
   #+end_src
* Font
  [[https://fonts.google.com/specimen/Inconsolata][Inconsolata]] is a pleasant  monospaced font.
  You can install it on Arch-Linux using packer, which would look like this:

  #+begin_src sh
  packer -S ttf-inconsolata
  #+end_src
  And to tell Emacs to use that font you add:
  #+begin_src emacs_lisp
  (add-to-list 'default-frame-alist
  '(font . "Inconsolata"))
  #+end_src
* Sane defaults
  #+begin_src emacs-lisp
  ;; Less prompting
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Put all backup in one place
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  
;  ;; No tabs pls
;  (setq-default indent-tabs-mode nil) 
  
  ;; Delete regions when marked
  (delete-selection-mode t)

  ;; Tell me what column my marker is in.
  (column-number-mode t)

  ;; Quiet in Emacs, please
  (setq visible-bell t)

  ;; Company-mode everywhere
  (use-package company
  :ensure t
  :config
  (global-company-mode)
  (diminish 'company-mode))

  ;; Please no bars. 
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  #+end_src
* Buffers
  Use ibuffer instead of list-buffers
  #+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)
  #+end_src
  Refresh dired in the background as well, BUT DON'T TELL ME!
  #+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  #+end_src
  Swap-buffers is a package that makes it easier to swap around buffers to get the placements you want.
  #+begin_src emacs-lisp
  (use-package swap-buffers
   :ensure t
   :bind
    ("M-s M-s" . swap-buffers))
  #+end_src
* Recent files
  Binding helms recentf to have recent files more easily accessible.
  #+begin_src emacs-lisp
  (use-package recentf
   :bind ("C-c C-r" . helm-recentf)
   :config
   (recentf-mode t)
   (setq recentf-max-saved-items 25))
  #+end_src
* Org-mode
  *crickets*
* Helm
  #+begin_src emacs-lisp
  (use-package helm
  :ensure t
  :bind
   (("M-x" . helm-M-x)
   ("C-x b" . helm-buffers-list)
   ("C-x C-f" . helm-find-files))
   :config
   (helm-mode 1)
   (diminish 'helm-mode))
  #+end_src
* Magit
  Magit is a great interface for git. Much smoother than using command
  line git.
  #+begin_src emacs-lisp
  (use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
   (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
  #+end_src
  I'mma try and steal this fullscreen magit conf. and see how it feels.
  #+begin_src emacs-lisp
  ;; full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src
* Programming
** General
   A package providing line numbering.
   #+begin_src emacs-lisp
   (add-hook 'prog-mode-hook 'linum-mode)
   #+end_src
   Fancy graphical undo-tree.
   #+begin_src emacs-lisp
   (use-package undo-tree
   :ensure t
   :config
   (add-hook 'prog-mode-hook 'undo-tree-mode)
   (diminish 'undo-tree-mode))
   #+end_src
   Rainbow delimiters in all languages!
   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
   :ensure t
   :config
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+end_src
** Python
   Some Python packages needed for a working Elpy env. should be
   installed before elpy is installed and configured.
   #+begin_src sh
   # Either of these
   pip install rope
   pip install jedi
   # flake8 for code checks
   pip install flake8
   # importmagic for automatic imports
   pip install importmagic
   # and autopep8 for automatic PEP8 formatting
   pip install autopep8
   # and yapf for code formatting
   pip install yapf
   #+end_src
   Or you could the the whole install with a oneliner
   #+begin_src sh
   pip install jedi flake8 importmagic autopep8
   #+end_src
   Enables Elpy, a nice Python environment.
   #+begin_src emacs-lisp
   (use-package elpy
   :ensure t
   :config
    (elpy-enable))
   #+end_src
* Web Development
  Impatient mode, showing changes made to your page, immediately.
  #+begin_src emacs-lisp
  (use-package impatient-mode
  :ensure t)
  #+end_src
* PDF-tools
A package that provides with high-res rendering of pdfs with low waiting time.
#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux) 
  (pdf-tools-install) ; PDF viewer (needs this separate installation)
  (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
  (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
#+end_src
* Spotify Bindings
  #+begin_src emacs-lisp
  (use-package spotify
  :ensure t
  :bind (("M-s M-n" . spotify-next)
         ("M-s M-p" . spotify-previous)
         ("M-p" . spotify-pause)
	 ("M-รถ" . spotify-play)
	 ("<XF86AudioPlay>" . spotify-play)))
  #+end_src
* TRAMP/Sudo
  I borrowed this from somewhere. It makes sudo access much smoother.
  #+begin_src emacs-lisp
  (defvar find-file-root-prefix (if (featurep 'xemacs) "/[sudo/root@localhost]" "/sudo:root@localhost:" )
  "*The filename prefix used to open a file with `find-file-root'.")

(defvar find-file-root-history nil
  "History list for files found using `find-file-root'.")

(defvar find-file-root-hook nil
  "Normal hook for functions to run after finding a \"root\" file.")

(defun find-file-root ()
  "*Open a file as the root user.
   Prepends `find-file-root-prefix' to the selected file name so that it
   maybe accessed via the corresponding tramp method."

  (interactive)
  (require 'tramp)
  (let* ( ;; We bind the variable `file-name-history' locally so we can
	 ;; use a separate history list for "root" files.
	 (file-name-history find-file-root-history)
	 (name (or buffer-file-name default-directory))
	 (tramp (and (tramp-tramp-file-p name)
		     (tramp-dissect-file-name name)))
	 path dir file)

    ;; If called from a "root" file, we need to fix up the path.
    (when tramp
      (setq path (tramp-file-name-localname tramp)
	    dir (file-name-directory path)))

    (when (setq file (read-file-name "Find file (UID = 0): " dir path))
      (find-file (concat find-file-root-prefix file))
      ;; If this all succeeded save our new history list.
      (setq find-file-root-history file-name-history)
      ;; allow some user customization
      (run-hooks 'find-file-root-hook))))

(global-set-key [(control x) (control r)] 'find-file-root)
  #+end_src
