#+TITLE: Emacs Config
#+Author: Filip Lindahl

* Customize settings
  A custom file to keep customizations out of
  [[file:init.el][init.el]]. All to declutter my [[file:init.el][init.el]].
  #+begin_src emacs_lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
  #+end_src

  Loading contents from a file containing all of my life ruining secrets.
  #+begin_src emacs-lisp
  (if (file-exists-p "private.el") (load-file (concat user-emacs-directory "private.el")))
  #+end_src
* Themes
** Solarized-dark
   Another dark theme that is slightly less dark than the previous
   theme and therefore works better during the day.
   #+begin_src emacs-lisp
   (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-dark t))
   #+end_src
* Font
  [[https://fonts.google.com/specimen/Inconsolata][Inconsolata]] is a pleasant  monospaced font.
  You can install it on Arch-Linux using packer, which would look like this:

  #+begin_src sh
  packer -S ttf-inconsolata
  #+end_src
  And to tell Emacs to use that font you add:
  #+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
  '(font . "Inconsolata-14"))
  #+end_src
* Sane defaults
  #+begin_src emacs-lisp
  ;; Less prompting
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Put all backup in one place
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; Delete regions when marked
  (delete-selection-mode t)

  ;; Tell me what column my marker is in.
  (column-number-mode t)

  ;; Quiet in Emacs, please
  (setq visible-bell t)

  ;; Company-mode everywhere
  (use-package company
  :ensure t
  :config
  (global-company-mode)
  (diminish 'company-mode))

  ;; Please no bars.
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Where am I on the line?
  (column-number-mode 1)

  ;; Show matching parentheses
  (show-paren-mode)
  #+end_src
* Keybindings
  Stolen from [[https://github.com/Jassob/.emacs.d][Jassobs Emacs config]].
  Great if you don't want to memorize thousands of combinations of keys.
  #+begin_src emacs-lisp
  (use-package guide-key
  :ensure t
  :diminish guide-key-mode
  :config
  (setq guide-key/guide-key-sequence t
	     guide-key/popup-window-position 'bottom
	     guide-key/highlight-command-regexp ".*")
  (guide-key-mode t))
  #+end_src

  This is where I'll keep my different keybindings for all kinds of
  things.
  #+begin_src emacs-lisp
  (global-set-key (kbd "M-n w") 'make-frame-command)
  #+end_src
* Buffers
  Use ibuffer instead of list-buffers
  #+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)
  #+end_src

  Refresh dired in the background as well, BUT DON'T TELL ME!
  #+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  #+end_src

  Swap-buffers is a package that makes it easier to swap around buffers to get the placements you want.
  #+begin_src emacs-lisp
  (use-package swap-buffers
   :ensure t
   :bind
    ("M-s M-s" . swap-buffers))
  #+end_src
* Recent files
  Binding helms recentf to have recent files more easily accessible.
  #+begin_src emacs-lisp
  (use-package recentf
   :bind ("C-c C-r" . helm-recentf)
   :config
   (recentf-mode t)
   (setq recentf-max-saved-items 25))
  #+end_src
* Org-mode
  *crickets*
* Helm
  helm-M-x is a beautiful thing that always helps me find what command
  I need.
  #+begin_src emacs-lisp
  (use-package helm
  :ensure t
  :bind
   (("M-x" . helm-M-x)))
   #+end_src
* Ido
  Looking for things using Ido is a more efficient way of looking
  while still keeping that "Emacs-way" of life.
  #+begin_src emacs-lisp
  (use-package ido
  :ensure t
  :config
  (ido-mode))
  #+end_src
* Magit
  Magit is a great interface for git. Much smoother than using command
  line git.
  #+begin_src emacs-lisp
  (use-package magit
  :ensure t
  :defer t
  :bind ("C-c g" . magit-status)
  :config
   (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
  #+end_src

  MagitHub
  #+begin_src emacs-lisp
  (use-package magithub
  :after magit
  :config (magithub-feature-autoinject t))
  #+end_src

* Programming
** General
   Line numbering.
   #+begin_src emacs-lisp
   (add-hook 'prog-mode-hook 'linum-mode)
   #+end_src

   Rainbow delimiters in all languages!
   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
   :ensure t
   :config
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+end_src

   Remove trailing whitespace when saving files.
   #+begin_src emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src

   Comment/uncomment regions of code.
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-x c") 'comment-or-uncomment-region)
   #+end_src

** Python
   Some Python packages needed for a working Elpy env. should be
   installed before elpy is installed and configured.
   #+begin_src sh
   # Either of these
   pip install rope
   pip install jedi
   # flake8 for code checks
   pip install flake8
   # importmagic for automatic imports
   pip install importmagic
   # and autopep8 for automatic PEP8 formatting
   pip install autopep8
   # and yapf for code formatting
   pip install yapf
   #+end_src
   Or you could the the whole install with a oneliner
   #+begin_src sh
   pip install jedi flake8 importmagic autopep8
   #+end_src
   Enables Elpy, a nice Python environment.
   #+begin_src emacs-lisp
   (use-package elpy
   :ensure t
   :config
    (elpy-enable))
   #+end_src
* Web Development
** Server
  Simple-httpd, needed for impatient-mode.
  #+begin_src emacs-lisp
  (use-package simple-httpd
  :ensure t
  :config
  (add-hook 'web-mode-hook 'httpd-start))
  #+end_src

  Impatient mode, showing changes made to your page immediately.
  Access at localhost:8080/imp
  #+begin_src emacs-lisp
  (use-package impatient-mode
  :ensure t
  :config
  (add-hook 'web-mode-hook 'impatient-mode))
  #+end_src
** HTML
  #+begin_src emacs-lisp
  (use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

  (use-package web-beautify
  :ensure t
  :after web-mode
  :config
  (add-hook 'web-mode-hook
             (lambda ()
               (add-hook 'before-save-hook 'web-beautify-html-buffer t t))))
  #+end_src

** CSS
** JavaScript
  js2-mode for Js
  #+begin_src emacs-lisp
  (use-package js2-mode
  :ensure t)
  #+end_src

  Tern and using tern as a company backend.
  #+begin_src emacs-lisp
  (use-package tern
  :ensure t
  :after js2-mode
  :config
  (add-hook 'js2-mode-hook (lambda () (tern-mode t))))

  (use-package company-tern
  :ensure t
  :after tern
  :config
  (add-to-list 'company-backends 'company-tern))
  #+end_src
* Spotify Bindings
  Keybindings so that I can control Spotify without switching focus from Emacs.
  #+begin_src emacs-lisp
  (use-package spotify
  :ensure t
  :bind (("M-s M-n" . spotify-next)
         ("M-s M-p" . spotify-previous)
         ("M-p" . spotify-playpause)
	 ("M-s M-c" . spotify-current)
	 ("<XF86AudioPlay>" . spotify-play)))
  #+end_src
* TRAMP/Sudo
  I borrowed this from somewhere. It makes sudo access much smoother.
  #+begin_src emacs-lisp
  (defvar find-file-root-prefix (if (featurep 'xemacs) "/[sudo/root@localhost]" "/sudo:root@localhost:" )
  "*The filename prefix used to open a file with `find-file-root'.")

(defvar find-file-root-history nil
  "History list for files found using `find-file-root'.")

(defvar find-file-root-hook nil
  "Normal hook for functions to run after finding a \"root\" file.")

(defun find-file-root ()
  "*Open a file as the root user.
   Prepends `find-file-root-prefix' to the selected file name so that it
   maybe accessed via the corresponding tramp method."

  (interactive)
  (require 'tramp)
  (let* ( ;; We bind the variable `file-name-history' locally so we can
	 ;; use a separate history list for "root" files.
	 (file-name-history find-file-root-history)
	 (name (or buffer-file-name default-directory))
	 (tramp (and (tramp-tramp-file-p name)
		     (tramp-dissect-file-name name)))
	 path dir file)

    ;; If called from a "root" file, we need to fix up the path.
    (when tramp
      (setq path (tramp-file-name-localname tramp)
	    dir (file-name-directory path)))

    (when (setq file (read-file-name "Find file (UID = 0): " dir path))
      (find-file (concat find-file-root-prefix file))
      ;; If this all succeeded save our new history list.
      (setq find-file-root-history file-name-history)
      ;; allow some user customization
      (run-hooks 'find-file-root-hook))))

(global-set-key [(control x) (control r)] 'find-file-root)
  #+end_src
