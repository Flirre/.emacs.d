#+TITLE: Emacs Config
#+Author: Filip Lindahl

* Customize settings
A custom file to keep customizations out of
[[file:init.el][init.el]]. All to declutter my [[file:init.el][init.el]].
#+begin_src emacs_lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

Loading contents from a file containing all of my life ruining secrets.
#+begin_src emacs-lisp
  (if (file-exists-p "private.el") (load-file (concat user-emacs-directory "private.el")))
#+end_src

Diminish mode, for less clutter.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

Setup from [[https://github.com/ianpan870102/.emacs.d][Ian's Yay-Evil Distro]].
#+begin_src emacs-lisp
(use-package emacs
  :preface
  (defvar flirre/indent-width 4) ; change this value to your preferred width
  :config
  (setq frame-title-format '("Emacs")
  ring-bell-function 'ignore
  frame-resize-pixelwise t
  default-directory "~/")

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 10000
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; increase line space for better readability
  (setq-default line-spacing 2)

  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width flirre/indent-width))
#+end_src
* Package managing
** Package utils
A package for smoother upgrading of packages.
#+BEGIN_SRC emacs-lisp
(use-package package-utils)
#+END_SRC
* Dashboard
The package [[https://github.com/rakanalh/emacs-dashboard][emacs-dashboard]] is a package that provides a dashboard to
get a quick overview of different things while inside Emacs.
For example projects via Projectile, agenda-view via Org-Agenda, etc.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;; Customizing what is shown on the dashboard.
(setq dashboard-banner-logo-title nil)
(setq dashboard-center-content t)
(setq dashboard-items '((agenda . 10)
                        (projects . 5)
                        (recents  . 5)))
(setq dashboard-set-file-icons t))
#+END_SRC
* Themes
** Doom-themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-molokai-fixed t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
* Font
[[https://fonts.google.com/specimen/Inconsolata][Inconsolata]] is a pleasant monospaced font.
You can install it on Arch Linux using an AUR-helper such as yay, which would look like this:
#+begin_src sh
  yay -S ttf-inconsolata
#+end_src
And to tell Emacs to use that font you run:
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
'(font . "Fantasque Sans Mono-18"))
#+end_src
* Sane defaults / customizations
#+begin_src emacs-lisp
  ;; Less prompting
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Put all backup in one place
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; Quiet in Emacs, please
  (setq visible-bell t)
#+end_src

#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :config
    (setq show-paren-delay 0)
    (show-paren-mode))

  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))

  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))

  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))

  ;; A modern on-the-fly syntax checking extension â€“ absolutely essential
  (use-package flycheck
    :hook (after-init . global-flycheck-mode))
#+END_SRC

[[https://github.com/adamrt/sane-term][sane-term]] provides ansi-term with some sane defaults making for a smoother experience.
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :bind (
    ("C-x t" . sane-term)
    ("C-x T" . sane-term-create)))
#+END_SRC

The kill ring can be a pain to browse through using M-y.
That's why we use popup-kill-ring instead!

#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
:bind ("M-y" . popup-kill-ring))
#+END_SRC

* Keybindings
which-key mode, great for finding and using new commands/
#+begin_src emacs-lisp
  (use-package which-key
  :diminish
  :config
  (which-key-mode t)
  (which-key-setup-side-window-bottom))
#+end_src

This is where I'll keep my different keybindings for all kinds of
things.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-n w") 'make-frame-command)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+end_src

Keybind for window resize
#+begin_src emacs-lisp
 (global-set-key (kbd "M-s-<left>") 'shrink-window-horizontally)
 (global-set-key (kbd "M-s-<right>") 'enlarge-window-horizontally)
 (global-set-key (kbd "M-s-<up>") 'enlarge-window)
 (global-set-key (kbd "M-s-<down>") 'shrink-window)
#+end_src

Rebind key to helm-imenu
#+begin_src emacs-lisp
  (global-set-key (kbd "M-i") 'helm-imenu-in-all-buffers)
#+end_src

Keybinding for running company (conflict with Magit-status-mode)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'company
(define-key company-mode-map (kbd "TAB") #'company-indent-or-complete-common)
)
#+END_SRC

Keyboard shortcut for reverting buffer without confirming.
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-R") 'revert-buffer-no-confirm)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-o") 'open-line )
#+END_SRC

* Buffers
Use ibuffer instead of list-buffers
#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+end_src

Swap-buffers is a package that makes it easier to swap around buffers to get the placements you want.
#+begin_src emacs-lisp
  (use-package swap-buffers
   :bind
    ("M-s M-s" . swap-buffers))
#+end_src

Dimmer.el 'dims' all buffers that aren't in focus so that it's easier to concentrate on the buffer you are editing.
#+begin_src emacs-lisp
(use-package dimmer
:config
(dimmer-configure-which-key)
(dimmer-configure-helm)
(dimmer-configure-magit)
(dimmer-mode t))
#+end_src
* Org-mode
Visual lines in org mode for better readability and indent those headers for me, please.
#+begin_src emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
:config
(with-eval-after-load 'org
  (use-package org-bullets
  :hook (org-mode . org-bullets-mode))
))
#+end_src

Pretty symbols shown in buffer
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

minted for org-mode pdfs
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted
  org-latex-packages-alist '(("" "minted"))
  org-latex-pdf-process
  '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC

keybinding for storing links to files/lines
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

Agenda mode for organization.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Add all agenda files to agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/agenda"))
#+END_SRC

Set correct path for archiving.
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/agenda/archives/%s_archive::")
#+END_SRC

Function to insert an :ARCHIVE: property with corresponding header.
#+BEGIN_SRC emacs-lisp
(defun org-insert-archive ()
"Inserts an :ARCHIVE: property under the current header."
(interactive)
(save-excursion
(outline-back-to-heading t)
(end-of-line)
(newline)
(insert ":ARCHIVE: %s_archive::* " (org-get-heading t t t t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun org-insert-archive-all ()
"Inserts :ARCHIVE: on all headings that do not already have it."
(interactive)
(save-excursion
(org-map-entries #'org-insert-archive nil nil 'archive)
))
#+END_SRC

Set keybinding for adding archive property
#+BEGIN_SRC emacs-lisp
   (define-key org-mode-map (kbd "C-c C-x s") 'org-insert-archive)
#+END_SRC

Store diary entries in a synced file.
#+BEGIN_SRC emacs-lisp
(setq diary-file "~/agenda/diary.org")
#+END_SRC

Some personal preference Org-mode settings.
+ Org-mode deadlines do not warn until 7 days are left.
+ Agenda times have a leading zero to make a more symmetric agenda.
+ Calendar has 12 for left margin to have it better centered.
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 7)
(setq org-agenda-time-leading-zero t)
(setq calendar-left-margin 12)
#+END_SRC

Since I want extra Agenda TODO-states to show that a task is
in-progress or if something is canceled, I've added them to the Org
Todo Keywords.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
'((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)" "CANCELED(c)")))
#+END_SRC

Extra keybind for quick access to org files from Agenda view.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-'") 'org-cycle-agenda-files)
#+END_SRC

Redefining stuck-projects as TODO items that aren't scheduled.
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
'("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
#+END_SRC

Org templates to quickly generate code blocks for different languages in org-mode.
Activated with 'C-c C-,'
#+begin_src emacs-add
(lisp-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))

(add-to-list 'org-structure-template-alist '("js" . "src js"))
#+end_src

#+BEGIN_SRC emacs-lisp
;         (after-load 'org
;    (org-babel-do-load-languages
;     'org-babel-load-languages
;     '(
;       (awk . t)
;       (calc .t)
;       (C . t)
;       (emacs-lisp . t)
;       (haskell . t)
;       (gnuplot . t)
;       (latex . t)
;       ;;(ledger . t)
;       (js . t)
;       (haskell . t)
;       (http . t)
;       (perl . t)
;       (python . t)
;       ;; (gnuplot . t)
;       ;; org-babel does not currently support php.  That is really sad.
;       ;;(php . t)
;       (R . t)
;       (scheme . t)
;       (sh . t)
;       (sql . t)
;       ;;(sqlite . t)
;       )))
#+END_SRC

* Project management
[[https://github.com/bbatsov/projectile][Projectile]] is a package that provides Emacs with a way to easier interact with the files a project.
#+BEGIN_SRC emacs-lisp
(use-package projectile
:bind-keymap
("C-c p" . projectile-command-map)
("s-p" . projectile-command-map)
:config
(projectile-mode +1))
#+END_SRC

Searching via ag
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

Using Helm
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
:after ag helm)
#+END_SRC
* Helm
helm-M-x is a beautiful thing that always helps me find what command
I need.
#+begin_src emacs-lisp
  (use-package helm
  :bind
   (("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files))
   :config
   (helm-mode t)

   (setq helm-always-two-windows nil)
   (setq helm-display-buffer-default-height 23)
   (setq helm-default-display-buffer-functions '(display-buffer-in-side-window)))

   (use-package helm-projectile
   :after helm projectile
   :config
   (helm-projectile-on))
#+end_src
* Ido
Looking for things using Ido is a more efficient way of looking
while still keeping that "Emacs-way" of life.
#+begin_src emacs-lisp
  (use-package ido
  :config
  (ido-mode))
#+end_src
* Git
** Magit
Magit is a great interface for git. Much smoother than using
commandline git.
#+begin_src emacs-lisp
  (use-package magit
  :bind ("C-c g" . magit-status)
  :config
   (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
   (setq magit-section-visibility-indicator nil))
#+end_src
** Forge
A package from the creator of magit which allows the user to interact
with Git forges such as GitHub and GitLab while using Emacs and Magit.
#+BEGIN_SRC emacs-lisp
(use-package forge
:after magit)
#+END_SRC
* Programming
** General
Line numbering.
#+begin_src emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Rainbow delimiters in all languages!
#+begin_src emacs-lisp
   (use-package rainbow-delimiters
   :config
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

Lightweight syntax highlighting improvement for numbers, operators, and escape sequences
From [[https://github.com/ianpan870102/.emacs.d/blob/master/config.org][Yay-Evil]].
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
:hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences
:hook (prog-mode . hes-mode))
#+END_SRC

Remove trailing whitespace when saving files.
#+begin_src emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Comment/uncomment regions of code.
#+begin_src emacs-lisp
   (global-set-key (kbd "C-x c") 'comment-or-uncomment-region)
#+end_src

Multimarkers!
#+begin_src emacs-lisp
   (use-package multiple-cursors
   :bind
   (("C-s-c C-s-c" . mc/edit-lines)
   ("C-s->" . mc/mark-next-like-this)
   ("C-s-<" . mc/mark-previous-like-this)
   ("C-s-h" . mc/mark-all-like-this)))
#+end_src

Line movement
   #+begin_src emacs-lisp
   (use-package move-dup
   :bind
   (("M-<up>" . 'md-move-lines-up)
   (("M-<down>" . 'md-move-lines-down))
   (("C-M-<up>" . 'md-duplicate-up)
   (("C-M-<down>" . 'md-duplicate-down)))))
   #+end_src

Show flycheck errors inline.
#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
:after flycheck
:hook (flycheck-mode . flycheck-inline-mode))
#+END_SRC

Sort words (useful when sorting incoming destructured objects in jsx)
#+begin_src emacs-lisp
    (defun sort-words (reverse beg end)
      "Sort words in region alphabetically, in REVERSE if negative.
    Prefixed with negative \\[universal-argument], sorts in reverse.

    The variable `sort-fold-case' determines whether alphabetic case
    affects the sort order.

    See `sort-regexp-fields'."
      (interactive "*P\nr")
      (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+end_src
** Python
Some Python packages needed for a working Elpy env. should be
installed before elpy is installed and configured.
#+begin_src sh
   # Either of these
   pip install rope
   pip install jedi
   # flake8 for code checks
   pip install flake8
   # importmagic for automatic imports
   pip install importmagic
   # and autopep8 for automatic PEP8 formatting
   pip install autopep8
   # and yapf for code formatting
   pip install yapf
#+end_src
Or you could the the whole install with a oneliner
#+begin_src sh
   pip install jedi flake8 importmagic autopep8
#+end_src
Enables Elpy, a nice Python environment.
#+begin_src emacs-lisp
   (use-package elpy
      :config
    (add-hook 'python-mode-hook 'elpy-enable))
#+end_src
** SQL
#+begin_src emacs-lisp
(use-package sqlformat
:defer t
:config
(setq sqlformat-command "pg_format")
(setq sqlformat-mode-format-on-save t)
(add-hook 'sql-mode-hook 'sqlformat-mode))
#+end_src

** Web Development
Use local node modules from inside emacs.
#+begin_src emacs-lisp
(use-package add-node-modules-path
:after rjsx-mode typescript-mode web-mode js-mode js2-mode
:hook
(rjsx-mode . #'add-node-modules-path)
(typescript-mode . #'add-node-modules-path)
(js-mode . #'add-node-modules-path)
(js2-mode . #'add-node-modules-path)
(web-mode . #'add-node-modules-path))
#+end_src
*** Web-mode
Web-mode configuration inspired by/semi-stolen from [[https://fransiska.github.io/emacs/2017/08/21/web-development-in-emacs][fransiska]].
#+begin_src emacs-lisp
  (use-package web-mode
  :mode (
  ("\\.html?\\'" . web-mode)
  ("\\.tsx\\'" . web-mode)
  ("\\.jsx\\'" . web-mode))
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-current-element-highlight t)
  (defun my-web-mode-hook ()
    (when (string-equal "html" (file-name-extension buffer-file-name))
    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files )))
  )
  (add-hook 'web-mode-hook 'my-web-mode-hook)
  (add-hook 'web-mode-hook
    (defun setup/tsx ()
    (setq flycheck-checker 'tsx-tide)
    (when (string-equal "tsx" (file-name-extension buffer-file-name))
    (tide-setup)
    (tide-hl-identifier-mode)
  (flycheck-mode))))
  (add-hook 'web-mode-hook
    (defun setup/tsx ()
    (setq flycheck-checker 'tsx-tide)
    (when (string-equal "jsx" (file-name-extension buffer-file-name))
    (tide-setup)
    (tide-hl-identifier-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-mode))))
  (add-hook 'web-mode-hook 'eslintd-fix-mode)
  )
(defun my/configure-web-mode-flycheck-checkers ()
  ;; in order to have flycheck enabled in web-mode, add an entry to this
  ;; cond that matches the web-mode engine/content-type/etc and returns the
  ;; appropriate checker.
  (-when-let (checker (cond
                       ((string= web-mode-content-type "jsx")
                        'javascript-eslint)))
    (flycheck-mode)
    (flycheck-select-checker checker)))

(add-hook 'web-mode-hook #'my/configure-web-mode-flycheck-checkers)
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package company-web
:defer t
:init
(with-eval-after-load 'company
(add-to-list 'company-backends 'company-web-html)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:ensure t
:defer t
:hook
(web-mode . emmet-mode)
(css-mode . emmet-mode)
(scss-mode . emmet-mode)
:config
(setq emmet-move-cursor-between-quotes t)
;;(setq emmet-expand-jsx-className? t) For use with React jsx
)
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :mode ("\\.js\\'")
  :hook
  (rjsx-mode . prettier-js-mode)
  (rjsx-mode . eslintd-fix-mode)
  :config
  (add-hook
  'rjsx-mode-hook
  (defun setup/javascript ()
  (interactive)
;; configure jsx-tide checker to run after your default jsx checker
  (tide-setup)
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  (tide-hl-identifier-mode)
  (flycheck-mode))))

#+END_SRC
Indium
#+begin_src emacs-lisp
(use-package indium)
#+end_src

eslint running in daemon-mode, making it run a bit faster compared to running ordinary eslint.
#+begin_src emacs-lisp
(use-package eslintd-fix
:after rjsx-mode
:config
(setq flycheck-javascript-eslint-executable "eslint_d"))

#+end_src

*** TypeScript
TIDE - TypeScript Interactive Development Environment
Tide setup heavily inspired by [[https://github.com/anler][Anler]].
#+begin_src emacs-lisp
(use-package tide
    :after (typescript-mode company flycheck))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook
  (typescript-mode . prettier-js-mode)
  :config
  (add-hook
  'typescript-mode-hook
  (defun setup/typescript ()
  (interactive)
  (tide-setup)
  (tide-hl-identifier-mode))))
#+END_SRC

#+begin_src emacs-lisp
(use-package add-node-modules-path
:config
(eval-after-load 'web-mode
  '(add-hook 'web-mode-hook #'add-node-modules-path)))
#+end_src

#+begin_src emacs-lisp
(use-package prettier-js
:diminish 'prettier-js-mode
:hook
(web-mode . prettier-js-mode)
:config
(setq prettier-js-args '("--single-quote"))
(setq prettier-js-command "prettier_d"))
#+end_src

* Markdown
Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* LaTeX
Auctex for Latex

#+begin_src emacs-lisp
(use-package auctex
:defer t
:ensure t
:config
((setq TeX-auto-save t)
 (setq TeX-parse-self t)
 (setq-default TeX-master nil))
 (add-hook 'LaTeX-mode-hook 'visual-line-mode)
 (add-hook 'LaTeX-mode-hook 'flyspell-mode)
 (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
 (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
 (setq reftex-plug-into-AUCTeX t))
#+end_src

* Spotify Bindings
Keybindings so that I can control Spotify without switching focus from Emacs.
#+begin_src emacs-lisp
(use-package spotify
:bind (
("M-s M-n" . spotify-next)
("M-s M-p" . spotify-previous)
("M-p" . spotify-playpause)
("M-s M-c" . spotify-current)
("<XF86AudioPlay>" . spotify-play)))
#+end_src
* TRAMP/Sudo
I borrowed this from somewhere. It makes sudo access much smoother.

#+begin_src emacs-lisp
  (defvar find-file-root-prefix (if (featurep 'xemacs) "/[sudo/root@localhost]" "/sudo:root@localhost:" )
  "*The filename prefix used to open a file with `find-file-root'.")

(defvar find-file-root-history nil
  "History list for files found using `find-file-root'.")

(defvar find-file-root-hook nil
  "Normal hook for functions to run after finding a \"root\" file.")

(defun find-file-root ()
  "*Open a file as the root user.
   Prepends `find-file-root-prefix' to the selected file name so that it
   maybe accessed via the corresponding tramp method."

  (interactive)
  (require 'tramp)
  (let* ( ;; We bind the variable `file-name-history' locally so we can
	 ;; use a separate history list for "root" files.
	 (file-name-history find-file-root-history)
	 (name (or buffer-file-name default-directory))
	 (tramp (and (tramp-tramp-file-p name)
		     (tramp-dissect-file-name name)))
	 path dir file)

    ;; If called from a "root" file, we need to fix up the path.
    (when tramp
      (setq path (tramp-file-name-localname tramp)
	    dir (file-name-directory path)))

    (when (setq file (read-file-name "Find file (UID = 0): " dir path))
      (find-file (concat find-file-root-prefix file))
      ;; If this all succeeded save our new history list.
      (setq find-file-root-history file-name-history)
      ;; allow some user customization
      (run-hooks 'find-file-root-hook))))

(global-set-key [(control x) (control r)] 'find-file-root)
  #+end_src
* Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
:ensure t
:hook (after-init . doom-modeline-mode)
:config
(setq doom-modeline-height 25)
(setq doom-modeline-bar-width 3)
(setq doom-modeline-buffer-file-name-style 'truncate-with-project)
(setq doom-modeline-icon (display-graphic-p))
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-buffer-encoding nil)
(setq doom-modeline-checker-simple-format t)
(setq doom-modeline-env-version t)
(setq doom-modeline-env-load-string "...")
(setq doom-modeline-vcs-max-length 30)

(doom-modeline-def-modeline 'flirres-line
  '(bar matches buffer-info remote-host selection-info)
  '(misc-info major-mode process vcs checker))

(defun setup-custom-doom-modeline ()
  (doom-modeline-set-modeline 'flirres-line 'default))

(add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline))
#+END_SRC

* Navigation
[[https://github.com/winterTTr/ace-jump-mode][Ace-jump-mode]] to be able to quickly jump around in buffers by specifying letters.
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:bind
("C-." . ace-jump-mode)
:config
(setq ace-jump-mode-gray-background nil))
#+END_SRC
* PDF
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:config
(pdf-loader-install))
#+END_SRC
* Mac OS
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
(setq mac-option-modifier 'super))

(use-package exec-path-from-shell
  :config (when (memq window-system '(mac ns x))
            (exec-path-from-shell-initialize)))
#+END_SRC
* All The Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package all-the-icons-dired
:after all-the-icons
:hook dired)

(use-package all-the-icons
  :config (setq all-the-icons-scale-factor 1.0))

(use-package all-the-icons-ivy
  :hook (after-init . all-the-icons-ivy-setup))

(use-package all-the-icons-ibuffer
  :ensure t
  :init (all-the-icons-ibuffer-mode 1))
#+END_SRC
* Dired
Show less information in dired by default.
To show more information press 'C-('.
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+END_SRC

View of subfolders in dired
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
        :ensure t
        :bind (:map dired-mode-map
                    ("i" . dired-subtree-insert)
                    (";" . dired-subtree-remove)
                    ("<tab>" . dired-subtree-toggle)
                    ("<backtab>" . dired-subtree-cycle)))
#+END_SRC

if there is a Dired buffer displayed in the next window, use its current directory.
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src
* Yay-Evil steals
Replace the active region just by typing text, just like modern editors
#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :config (delete-selection-mode +1))
#+end_src

Enable column numbers
#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :config (column-number-mode +1))
#+end_src

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+end_src

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (global-eldoc-mode +1)
  (setq eldoc-idle-delay 0.4))
#+end_src
* Terminal
libvterm for an okay functioning terminal emulator experience inside Emacs
#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src
* Misc
This is where I keep all random functions and packages that can't be easily categorized into my other existing categories while not big enough to warrant a new category.


Functions to increment or decrement the number where the pointer is.
1. Handy when bumping version numbers or doing exploratory programming.
#+begin_src emacs-lisp
(defun increment-number-at-point-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))

(defun decrement-number-at-point-decimal (&optional arg)
  (interactive "p*")
  (increment-number-at-point-decimal (if arg (- arg) -1)))
#+end_src
Keybindings for inc and dec
#+begin_src emacs-lisp
    (global-set-key (kbd "C-c C-+") 'increment-number-at-point-decimal)
    (global-set-key (kbd "C-c C--") 'decrement-number-at-point-decimal)
#+end_src
