#+TITLE: Emacs Config
#+Author: Filip Lindahl

* Customize settings
A custom file to keep customizations out of
[[file:init.el][init.el]]. All to declutter my [[file:init.el][init.el]].
#+begin_src emacs_lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

Loading contents from a file containing all of my life ruining secrets.
#+begin_src emacs-lisp
  (if (file-exists-p "private.el") (load-file (concat user-emacs-directory "private.el")))
#+end_src

Diminish mode, for less clutter.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
* Package managing
** Package utils
A package for smoother upgrading of packages.
#+BEGIN_SRC emacs-lisp
(use-package package-utils)
#+END_SRC
* Dashboard
The package [[https://github.com/rakanalh/emacs-dashboard][emacs-dashboard]] is a package that provides a dashboard to
get a quick overview of different things while inside Emacs.
For example projects via Projectile, agenda-view via Org-Agenda, etc.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC

Customizing what is shown on the dashboard.
#+BEGIN_SRC emacs-lisp
(setq dashboard-banner-logo-title nil)
(setq dashboard-center-content t)
(setq dashboard-items '((agenda . 10)
                        (projects . 5)
                        (recents  . 5)))
#+END_SRC
* Themes
** Darcula
#+BEGIN_SRC emacs-lisp
(use-package darcula-theme)
#+END_SRC
* Font
[[https://fonts.google.com/specimen/Inconsolata][Inconsolata]] is a pleasant monospaced font.
You can install it on Arch Linux using an AUR-helper such as yay, which would look like this:
#+begin_src sh
  yay -S ttf-inconsolata
#+end_src
And to tell Emacs to use that font you run:
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
'(font . "Fantasque Sans Mono-18"))
#+end_src
* Sane defaults / customizations
#+begin_src emacs-lisp
  ;; Less prompting
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Put all backup in one place
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; Delete regions when marked
  (delete-selection-mode t)

  ;; Tell me what column my marker is in.
  (column-number-mode t)

  ;; Quiet in Emacs, please
  (setq visible-bell t)

  ;; Please no bars.
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Where am I on the line?
  (column-number-mode 1)
#+end_src

Even Better Defaults from [[https://github.com/ianpan870102/.emacs.d][Ian's Yay-Evil Distro]].
#+BEGIN_SRC emacs-lisp
;; better scrolling experience
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position t
      auto-window-vscroll nil)

;; increase line space for better readability
(setq-default line-spacing 2)

(use-package paren
  :ensure nil
  :config
  (setq show-paren-delay 0)
  (show-paren-mode))

(use-package elec-pair
  :ensure nil
  :config (add-hook 'prog-mode-hook 'electric-pair-mode))

(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                mouse-wheel-progressive-speed nil))

(use-package company
  :diminish company-mode
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                            company-echo-metadata-frontend))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)))

;; A modern on-the-fly syntax checking extension â€“ absolutely essential
(use-package flycheck
  :hook (after-init . global-flycheck-mode))

;; Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy and Helm. We install ido-vertical to get a better view of the available options (use C-n, C-p or arrow keys to navigate).
;; Flex matching is a nice touch and we are lucky to have flx-ido for that purpose.
(use-package ido-vertical-mode
  :hook ((after-init . ido-mode)
         (after-init . ido-vertical-mode))
  :config
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package flx-ido
:config (flx-ido-mode))
#+END_SRC

[[https://github.com/adamrt/sane-term][sane-term]] provides ansi-term with some sane defaults making for a smoother experience.
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :bind (
    ("C-x t" . sane-term)
    ("C-x T" . sane-term-create)))
#+END_SRC

The kill ring can be a pain to browse through using M-y.
That's why we use popup-kill-ring instead!

#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
:bind ("M-y" . popup-kill-ring))
#+END_SRC

* Keybindings
which-key mode, great for finding and using new commands/
#+begin_src emacs-lisp
  (use-package which-key
  :diminish
  :config
  (which-key-mode t)
  (which-key-setup-side-window-bottom))
#+end_src

This is where I'll keep my different keybindings for all kinds of
things.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-n w") 'make-frame-command)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+end_src

Keybind for window resize
#+begin_src emacs-lisp
 (global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
 (global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
 (global-set-key (kbd "C-s-<up>") 'enlarge-window)
 (global-set-key (kbd "C-s-<down>") 'shrink-window)
#+end_src

Rebind key to helm-imenu
#+begin_src emacs-lisp
  (global-set-key (kbd "M-i") 'helm-imenu-in-all-buffers)
#+end_src

Keybinding for running company (conflict with Magit-status-mode)
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'company
(define-key company-mode-map (kbd "TAB") #'company-indent-or-complete-common)
)
#+END_SRC

Keyboard shortcut for reverting buffer without confirming.
#+BEGIN_SRC emacs-lisp
  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-R") 'revert-buffer-no-confirm)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-o") 'other-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-o") 'open-line )
#+END_SRC

* Buffers
Use ibuffer instead of list-buffers
#+begin_src emacs-lisp
  (defalias 'list-buffers 'ibuffer)
#+end_src

Auto revert all buffers
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

Refresh dired in the background as well, quietly.
#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+end_src

Swap-buffers is a package that makes it easier to swap around buffers to get the placements you want.
#+begin_src emacs-lisp
  (use-package swap-buffers
   :bind
    ("M-s M-s" . swap-buffers))
#+end_src
* Org-mode
Visual lines in org mode for better readability and indent those headers for me, please.
#+begin_src emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
:config
(with-eval-after-load 'org
  (use-package org-bullets
  :hook (org-mode . org-bullets-mode))
))
#+end_src

Pretty symbols shown in buffer
#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

minted for org-mode pdfs
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted
  org-latex-packages-alist '(("" "minted"))
  org-latex-pdf-process
  '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+END_SRC

keybinding for storing links to files/lines
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

Agenda mode for organization.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Add all agenda files to agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/agenda"))
#+END_SRC

Set correct path for archiving.
#+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/agenda/archives/%s_archive::")
#+END_SRC

Function to insert an :ARCHIVE: property with corresponding header.
#+BEGIN_SRC emacs-lisp
(defun org-insert-archive ()
"Inserts an :ARCHIVE: property under the current header."
(interactive)
(save-excursion
(outline-back-to-heading t)
(end-of-line)
(newline)
(insert ":ARCHIVE: %s_archive::* " (org-get-heading t t t t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun org-insert-archive-all ()
"Inserts :ARCHIVE: on all headings that do not already have it."
(interactive)
(save-excursion
(org-map-entries #'org-insert-archive nil nil 'archive)
))
#+END_SRC

Set keybinding for adding archive property
#+BEGIN_SRC emacs-lisp
   (define-key org-mode-map (kbd "C-c C-x s") 'org-insert-archive)
#+END_SRC

Store diary entries in a synced file.
#+BEGIN_SRC emacs-lisp
(setq diary-file "~/agenda/diary.org")
#+END_SRC

Some personal preference Org-mode settings.
+ Org-mode deadlines do not warn until 7 days are left.
+ Agenda times have a leading zero to make a more symmetric agenda.
+ Calendar has 12 for left margin to have it better centered.
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 7)
(setq org-agenda-time-leading-zero t)
(setq calendar-left-margin 12)
#+END_SRC

Since I want extra Agenda TODO-states to show that a task is
in-progress or if something is canceled, I've added them to the Org
Todo Keywords.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
'((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)" "CANCELED(c)")))
#+END_SRC

Extra keybind for quick access to org files from Agenda view.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-'") 'org-cycle-agenda-files)
#+END_SRC

Redefining stuck-projects as TODO items that aren't scheduled.
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
'("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
#+END_SRC

* Project management
[[https://github.com/bbatsov/projectile][Projectile]] is a package that provides Emacs with a way to easier interact with the files a project.
#+BEGIN_SRC emacs-lisp
(use-package projectile
:bind-keymap
("C-c p" . projectile-command-map)
("s-p" . projectile-command-map)
:config
(projectile-mode +1))
#+END_SRC

Searching via ag
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

Using Helm
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
:after ag helm)
#+END_SRC
* Helm
helm-M-x is a beautiful thing that always helps me find what command
I need.
#+begin_src emacs-lisp
  (use-package helm
  :bind
   (("M-x" . helm-M-x)))
#+end_src
* Ido
Looking for things using Ido is a more efficient way of looking
while still keeping that "Emacs-way" of life.
#+begin_src emacs-lisp
  (use-package ido
  :config
  (ido-mode))
#+end_src
* Git
** Magit
Magit is a great interface for git. Much smoother than using
commandline git.
#+begin_src emacs-lisp
  (use-package magit
  :bind ("C-c g" . magit-status)
  :config
   (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
   (setq magit-section-visibility-indicator nil))
#+end_src
** Forge
A package from the creator of magit which allows the user to interact
with Git forges such as GitHub and GitLab while using Emacs and Magit.
#+BEGIN_SRC emacs-lisp
(use-package forge
:after magit)
#+END_SRC
* Programming
** General
Line numbering.
#+begin_src emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Rainbow delimiters in all languages!
#+begin_src emacs-lisp
   (use-package rainbow-delimiters
   :config
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

Lightweight syntax highlighting improvement for numbers, operators, and escape sequences
From [[https://github.com/ianpan870102/.emacs.d/blob/master/config.org][Yay-Evil]].
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
:hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences
:hook (prog-mode . hes-mode))
#+END_SRC

Remove trailing whitespace when saving files.
#+begin_src emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Comment/uncomment regions of code.
#+begin_src emacs-lisp
   (global-set-key (kbd "C-x c") 'comment-or-uncomment-region)
#+end_src

Multimarkers!
#+begin_src emacs-lisp
   (use-package multiple-cursors
   :bind
   (("C-s-c C-s-c" . mc/edit-lines)
   ("C-s->" . mc/mark-next-like-this)
   ("C-s-<" . mc/mark-previous-like-this)
   ("C-s-h" . mc/mark-all-like-this)))
#+end_src

Line movement
   #+begin_src emacs-lisp
   (use-package move-dup
   :bind
   (("M-<up>" . 'md-move-lines-up)
   (("M-<down>" . 'md-move-lines-down))
   (("C-M-<up>" . 'md-duplicate-up)
   (("C-M-<down>" . 'md-duplicate-down)))))
   #+end_src

Show flycheck errors inline.
#+BEGIN_SRC emacs-lisp
(use-package flycheck-inline
:after flycheck
:hook (flycheck-mode . flycheck-inline-mode))

#+END_SRC
** Python
Some Python packages needed for a working Elpy env. should be
installed before elpy is installed and configured.
#+begin_src sh
   # Either of these
   pip install rope
   pip install jedi
   # flake8 for code checks
   pip install flake8
   # importmagic for automatic imports
   pip install importmagic
   # and autopep8 for automatic PEP8 formatting
   pip install autopep8
   # and yapf for code formatting
   pip install yapf
#+end_src
Or you could the the whole install with a oneliner
#+begin_src sh
   pip install jedi flake8 importmagic autopep8
#+end_src
Enables Elpy, a nice Python environment.
#+begin_src emacs-lisp
   (use-package elpy
      :config
    (add-hook 'python-mode-hook 'elpy-enable))
#+end_src
** SQL
#+begin_src emacs-lisp
(use-package sqlformat
:defer t
:config
(setq sqlformat-command "pg_format")
(setq sqlformat-mode-format-on-save t)
(add-hook 'sql-mode-hook 'sqlformat-mode))
#+end_src

** Web Development
*** Web-mode
Web-mode configuration inspired by/semi-stolen from [[https://fransiska.github.io/emacs/2017/08/21/web-development-in-emacs][fransiska]].
#+begin_src emacs-lisp
  (use-package web-mode
  :mode (
  ("\\.html?\\'" . web-mode)
  ("\\.tsx\\'" . web-mode)
  ("\\.jsx\\'" . web-mode))
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-current-element-highlight t)
  (defun my-web-mode-hook ()
    (when (string-equal "html" (file-name-extension buffer-file-name))
    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files )))
  )
  (add-hook 'web-mode-hook 'my-web-mode-hook)
  (add-hook 'web-mode-hook
    (defun setup/tsx ()
    (setq flycheck-checker 'tsx-tide)
    (when (string-equal "tsx" (file-name-extension buffer-file-name))
    (tide-setup)
    (tide-hl-identifier-mode)
    (eldoc-mode)
  (flycheck-mode))))
  )
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package company-web
:defer t
:init
(with-eval-after-load 'company
(add-to-list 'company-backends 'company-web-html)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:ensure t
:defer t
:hook
(web-mode . emmet-mode)
(css-mode . emmet-mode)
(scss-mode . emmet-mode)
:config
(setq emmet-move-cursor-between-quotes t)
;;(setq emmet-expand-jsx-className? t) For use with React jsx
)
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :mode ("\\.js\\'")
  :hook
  (rjsx-mode . prettier-js-mode)
  :config
  (add-hook
  'rjsx-mode-hook
  (defun setup/javascript ()
  (interactive)
;; configure jsx-tide checker to run after your default jsx checker
  (tide-setup)
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  (tide-hl-identifier-mode)
  (eldoc-mode)
  (flycheck-mode))))

#+END_SRC
Indium
#+begin_src emacs-lisp
(use-package indium)
#+end_src

*** TypeScript
TIDE - TypeScript Interactive Development Environment
Tide setup heavily inspired by [[https://github.com/anler][Anler]].
#+begin_src emacs-lisp
(use-package tide
    :after (typescript-mode company flycheck))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook
  (typescript-mode . prettier-js-mode)
  :config
  (add-hook
  'typescript-mode-hook
  (defun setup/typescript ()
  (interactive)
  (tide-setup)
  (tide-hl-identifier-mode))))
#+END_SRC

#+begin_src emacs-lisp
(use-package add-node-modules-path
:config
(eval-after-load 'web-mode
  '(add-hook 'web-mode-hook #'add-node-modules-path)))
#+end_src

#+begin_src emacs-lisp
(use-package prettier-js
:diminish 'prettier-js-mode
:hook
(web-mode . prettier-js-mode)
:config
(setq prettier-js-args '("--single-quote")))
#+end_src

* Markdown
Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* LaTeX
Auctex for Latex

#+begin_src emacs-lisp
(use-package auctex
:defer t
:ensure t
:config
((setq TeX-auto-save t)
 (setq TeX-parse-self t)
 (setq-default TeX-master nil))
 (add-hook 'LaTeX-mode-hook 'visual-line-mode)
 (add-hook 'LaTeX-mode-hook 'flyspell-mode)
 (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
 (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
 (setq reftex-plug-into-AUCTeX t))
#+end_src

* Spotify Bindings
Keybindings so that I can control Spotify without switching focus from Emacs.
#+begin_src emacs-lisp
(use-package spotify
:bind (
("M-s M-n" . spotify-next)
("M-s M-p" . spotify-previous)
("M-p" . spotify-playpause)
("M-s M-c" . spotify-current)
("<XF86AudioPlay>" . spotify-play)))
#+end_src
* TRAMP/Sudo
I borrowed this from somewhere. It makes sudo access much smoother.

#+begin_src emacs-lisp
  (defvar find-file-root-prefix (if (featurep 'xemacs) "/[sudo/root@localhost]" "/sudo:root@localhost:" )
  "*The filename prefix used to open a file with `find-file-root'.")

(defvar find-file-root-history nil
  "History list for files found using `find-file-root'.")

(defvar find-file-root-hook nil
  "Normal hook for functions to run after finding a \"root\" file.")

(defun find-file-root ()
  "*Open a file as the root user.
   Prepends `find-file-root-prefix' to the selected file name so that it
   maybe accessed via the corresponding tramp method."

  (interactive)
  (require 'tramp)
  (let* ( ;; We bind the variable `file-name-history' locally so we can
	 ;; use a separate history list for "root" files.
	 (file-name-history find-file-root-history)
	 (name (or buffer-file-name default-directory))
	 (tramp (and (tramp-tramp-file-p name)
		     (tramp-dissect-file-name name)))
	 path dir file)

    ;; If called from a "root" file, we need to fix up the path.
    (when tramp
      (setq path (tramp-file-name-localname tramp)
	    dir (file-name-directory path)))

    (when (setq file (read-file-name "Find file (UID = 0): " dir path))
      (find-file (concat find-file-root-prefix file))
      ;; If this all succeeded save our new history list.
      (setq find-file-root-history file-name-history)
      ;; allow some user customization
      (run-hooks 'find-file-root-hook))))

(global-set-key [(control x) (control r)] 'find-file-root)
  #+end_src
* TODO Modeline
* Navigation
[[https://github.com/winterTTr/ace-jump-mode][Ace-jump-mode]] to be able to quickly jump around in buffers by specifying letters.
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:bind
("C-." . ace-jump-mode)
:config
(setq ace-jump-mode-gray-background nil))
#+END_SRC
* PDF
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:config
(pdf-loader-install))
#+END_SRC
* Mac OS
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
(setq mac-option-modifier 'super))
#+END_SRC
